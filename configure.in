AC_INIT([control-center], [2.17.90],
        [http://bugzilla.gnome.org/enter_bug.cgi?product=control-center])

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([shell])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([1.9 no-dist-gzip dist-bzip2 tar-ustar])
AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AM_PROG_LIBTOOL

# Use the GNOME documentation framework
GNOME_DOC_INIT

m4_define(gnomevfs_minver, 2.0.0)
m4_define(fontconfig_minver, 1.0.0)
m4_define(xft_minver, 2.1.2)
m4_define(gtk_minver, 2.8.12)
m4_define(libbonobo_minver, 2.0.0)
m4_define(libgnomeui_minver, 2.2.0)
m4_define(nautilus_minver, 2.6.0)

changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

# Internationalization support

IT_PROG_INTLTOOL([0.35.0])

GETTEXT_PACKAGE=control-center-2.0
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Gettext package])

AM_GLIB_GNU_GETTEXT

GNOME_COMMON_INIT
GNOME_DEBUG_CHECK
GNOME_COMPILE_WARNINGS([maximum])
GNOME_MAINTAINER_MODE_DEFINES

AC_CHECK_FUNCS(usleep)
AC_CHECK_FUNCS(putenv)
AC_CHECK_FUNCS(setenv)

AC_PATH_XTRA
x_libs="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"

AC_CHECK_FUNC(XScreenSaverQueryInfo, [
  TYPING_BREAK="typing-break"], [
  save_LIBS=$LIBS
  LIBS="$LIBS $X_PRE_LIBS $X_LIBS -lXss -lXext -lX11"
  AC_CHECK_LIB(Xss, XScreenSaverQueryInfo, [
    TYPING_BREAK="typing-break"
    SCREENSAVER_LIBS="$X_PRE_LIBS $X_LIBS -lXss -lXext -lX11"], [
    LIBS=$save_LIBS
    LIBS="$LIBS $X_PRE_LIBS $X_LIBS -lXext -lX11"
    AC_CHECK_LIB(Xext, XScreenSaverQueryInfo, [
      TYPING_BREAK="typing-break"
      SCREENSAVER_LIBS="$X_PRE_LIBS $X_LIBS -lXext -lX11"],[])])
  LIBS=$save_LIBS])
AC_SUBST(TYPING_BREAK)
AC_SUBST(SCREENSAVER_LIBS)

dnl keyboard-properties-capplet
savecppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $X_CFLAGS"
AC_CHECK_HEADERS([X11/Xlib.h])
AC_CHECK_LIB(Xxf86misc, XF86MiscQueryExtension, [
  AC_CHECK_HEADERS([X11/extensions/xf86misc.h], [XF86MISC_LIBS="-lXxf86misc"],[],
[#if HAVE_X11_XLIB_H
#include <X11/Xlib.h>
#endif
])])
AC_SUBST(XF86MISC_LIBS)
AC_CHECK_HEADERS(X11/extensions/XKB.h)
CPPFLAGS=$savecppflags

dnl ==============================================
dnl Check that we meet the  dependencies
dnl ==============================================

COMMON_MODULES="gtk+-2.0 >= 2.3.0 dnl
 gconf-2.0 dnl
 libgnomeui-2.0 >= 2.2.0 dnl
 libglade-2.0 >= 2.0.0 dnl
 libbonobo-2.0 dnl
 libbonoboui-2.0 dnl
 gnome-desktop-2.0 >= 2.2.0"
PKG_CHECK_MODULES(LIBSLAB, $COMMON_MODULES gnome-desktop-2.0 librsvg-2.0 libgnome-menu pango)
PKG_CHECK_MODULES(CAPPLET, $COMMON_MODULES)
PKG_CHECK_MODULES(GNOMECC, $COMMON_MODULES libgnome-menu >= 2.10.1 libpanelapplet-2.0)
PKG_CHECK_MODULES(GNOME_SETTINGS_DAEMON,
  [gtk+-2.0 gconf-2.0 libgnomeui-2.0 esound gnome-desktop-2.0 libglade-2.0])
PKG_CHECK_MODULES(OLD_CAPPLET, libgnomeui-2.0 libglade-2.0)
PKG_CHECK_MODULES(GNOME, libgnomeui-2.0)
PKG_CHECK_MODULES(GTK, gtk+-2.0)
PKG_CHECK_MODULES(DBUS, dbus-1 dbus-glib-1)
PKG_CHECK_MODULES(VFS_CAPPLET, $COMMON_MODULES gnome-vfs-module-2.0 gnome-vfs-2.0)
PKG_CHECK_MODULES(GNOME_DESKTOP, gnome-desktop-2.0)
PKG_CHECK_MODULES(DEFAULT_APPLICATIONS_CAPPLET, libxml-2.0)
PKG_CHECK_MODULES(SOUND_CAPPLET, esound gstreamer-0.10 gstreamer-plugins-base-0.10)
SOUND_CAPPLET_LIBS="$SOUND_CAPPLET_LIBS -lgstaudio-0.10 -lgstinterfaces-0.10"
AC_SUBST(SOUND_CAPPLET_LIBS)
PKG_CHECK_MODULES(METACITY, libmetacity-private)

dnl
dnl Check for Xft version 2; we build in extra functionality to the font capplet
dnl when we have it.
dnl
xft_modules=
if $PKG_CONFIG --exists xft ; then
  xft_modules="xft"
  AC_DEFINE(HAVE_XFT2,,[Build Xft functionality to the font capplet])
fi

dnl
dnl Check for XInput, needed for gnome-settings-daemon mouse settings
dnl		
	
have_xinput=no
AC_CHECK_LIB(Xi, XListInputDevices,
  [AC_CHECK_HEADER(X11/extensions/XInput.h,
     have_xinput=yes
     XINPUT_LIBS="-lXi"
     AC_DEFINE(HAVE_XINPUT, 1, Have the XInput extension library),
	  :, [#include <X11/Xlib.h>])], : ,
       -lXi $x_libs)
AM_CONDITIONAL(HAVE_XINPUT, [test $have_xinput = yes])
GNOME_SETTINGS_DAEMON_LIBS="$GNOME_SETTINGS_DAEMON_LIBS $XINPUT_LIBS"

PKG_CHECK_MODULES(FONT_CAPPLET, $COMMON_MODULES $xft_modules)

PKG_CHECK_MODULES(AT_CAPPLET, $COMMON_MODULES)

dnl
dnl Check for XRandR, needed for display capplet
dnl		
	
have_randr=no
AC_CHECK_LIB(Xrandr, XRRUpdateConfiguration,
  [AC_CHECK_HEADER(X11/extensions/Xrandr.h,
     have_randr=yes
     RANDR_LIBS="-lXrandr -lXrender"
     AC_DEFINE(HAVE_RANDR, 1, Have the Xrandr extension library),
	  :, [#include <X11/Xlib.h>])], : ,
       -lXrandr -lXrender $x_libs)
AM_CONDITIONAL(HAVE_RANDR, [test $have_randr = yes])
	
PKG_CHECK_MODULES(DISPLAY_CAPPLET, $COMMON_MODULES)

DISPLAY_CAPPLET_LIBS="$DISPLAY_CAPPLET_LIBS $RANDR_LIBS"

CAPPLET_LIBS="$CAPPLET_LIBS $x_libs"
GNOMECC_LIBS="$GNOMECC_LIBS $x_libs"
GNOME_SETTINGS_DAEMON_LIBS="$GNOME_SETTINGS_DAEMON_LIBS $x_libs"

AC_PATH_PROG(GCONFTOOL, gconftool-2)

dnl
dnl Check for XCursor support.  If it exists, then we compile the
dnl mouse capplet with support for it turned on
dnl
have_xcursor=no
PKG_CHECK_MODULES(XCURSOR, [
	xcursor
	],
	have_xcursor=yes
	AC_DEFINE(HAVE_XCURSOR, 1, Have the Xcursor extension),
	have_xcursor=no)
AM_CONDITIONAL(HAVE_XCURSOR, [test $have_xcursor=yes])

CAPPLET_LIBS="$CAPPLET_LIBS $XCURSOR_LIBS"

dnl
dnl Check for gtk+ with multihead support
dnl
AC_MSG_CHECKING([for gtk+ multihead support])
if $PKG_CONFIG --atleast-version 2.1.0 gtk+-2.0; then
   AC_DEFINE(HAVE_GTK_MULTIHEAD,,[gtk+ with multihead support found])
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

dnl ==============
dnl gswitchit
dnl ==============
PKG_CHECK_MODULES(LIBGNOMEKBD, [libgnomekbd >= 0.1])
AC_SUBST(LIBGNOMEKBD_CFLAGS)
AC_SUBST(LIBGNOMEKBD_LIBS)

PKG_CHECK_MODULES(LIBGNOMEKBDUI, [libgnomekbdui >= 0.1])
AC_SUBST(LIBGNOMEKBDUI_CFLAGS)
AC_SUBST(LIBGNOMEKBDUI_LIBS)

dnl ==============================================
dnl themus and fontilust dependencies
dnl ==============================================

AC_ARG_ENABLE(vfs-methods,
  AC_HELP_STRING([--disable-vfs-methods],
                 [Do not build the fonts:/// and themes:/// uri schemes]),,
  enable_vfs_methods=yes)

if test x$enable_vfs_methods = xyes; then 

  PKG_CHECK_MODULES(THEME_METHOD,
  [gnome-vfs-module-2.0 >= 2.2.0 dnl
   gnome-vfs-2.0 >= 2.2.0])
  PKG_CHECK_MODULES(THEMUS_THUMBNAILER,
  [gdk-2.0 >= 2.2.0 dnl
   libgnomeui-2.0 >= 2.2.0 dnl
   libmetacity-private dnl
   gnome-vfs-2.0 >= 2.2.0])
  PKG_CHECK_MODULES(THEMUS_COMPONENT,
  [glib-2.0 >= 2.8.0 dnl
   gtk+-2.0 >= 2.4.0 dnl
   libnautilus-extension >= nautilus_minver])
  PKG_CHECK_MODULES(THEMUS_APPLIER,
  [gtk+-2.0 >= 2.4.0 dnl
   libglade-2.0 >= 2.0 dnl
   gnome-vfs-2.0 >= 2.2.0 dnl
   libgnome-2.0 >= 2.2.0])
  PKG_CHECK_MODULES(FONT_METHOD,
  [gnome-vfs-module-2.0 >= gnomevfs_minver dnl
   fontconfig >= fontconfig_minver])
  PKG_CHECK_MODULES(FONT_THUMBNAILER,
  [gnome-vfs-2.0 >= gnomevfs_minver dnl
   gdk-pixbuf-2.0 >= gtk_minver])
  PKG_CHECK_MODULES(FONT_CONTEXT_MENU,
  [glib-2.0 >= 2.8.0 dnl
   gnome-vfs-2.0 >= gnomevfs_minver dnl
   libnautilus-extension >= nautilus_minver])
  PKG_CHECK_MODULES(FONT_VIEW,
  [gnome-vfs-2.0 >= gnomevfs_minver dnl
   xft >= xft_minver dnl
   gtk+-2.0 >= gtk_minver dnl
   libgnomeui-2.0 >= libgnomeui_minver])

  # Add freetype flags to the thumbnailer script
  AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)
  if test "x$FREETYPE_CONFIG" = xno; then
      AC_MSG_ERROR([Could not find freetype-config script])
  fi
  FONT_THUMBNAILER_CFLAGS="$FONT_THUMBNAILER_CFLAGS `$FREETYPE_CONFIG --cflags`"
  FONT_THUMBNAILER_LIBS="$FONT_THUMBNAILER_LIBS `$FREETYPE_CONFIG --libs`"

  THEMUS=themus
  FONTILUS=fontilus
  AC_SUBST(THEMUS)
  AC_SUBST(FONTILUS)

  # update LIBS for $export_dynamic
  export_dynamic=`(./libtool --config; echo eval echo \\$export_dynamic_flag_spec) | sh`
  if test -n "$export_dynamic"; then
    THEME_METHOD_LIBS=`echo $THEME_METHOD_LIBS | sed -e "s/$export_dynamic//"`
    THEMUS_COMPONENT_LIBS=`echo $THEMUS_COMPONENT_LIBS | sed -e "s/$export_dynamic//"`
    FONT_VIEW_LIBS=`echo $FONT_VIEW_LIBS | sed -e "s/$export_dynamic//"`
    FONT_CONTEXT_MENU_LIBS=`echo $CONTEXT_MENU_LIBS | sed -e "s/$export_dynamic//"`
    FONT_THUMBNAILER_LIBS=`echo $FONT_THUMBNAILER_LIBS | sed -e "s/$export_dynamic//"`
    FONT_METHOD_LIBS=`echo $FONT_METHOD_LIBS | sed -e "s/$export_dynamic//"`
  fi
fi

dnl ==============================================
dnl About-me
dnl ==============================================

AC_CHECK_HEADERS([pty.h stropts.h])
AC_CHECK_FUNCS(forkpty,, AC_CHECK_LIB(util,forkpty, [AC_DEFINE(HAVE_FORKPTY)] [ABOUTME_LIBS="$ABOUTME_LIBS -lutil"]))
AC_SUBST(ABOUTME_LIBS)

dnl -----  pseudo terminal handling
dnl -----  os        pty master      streams modules
dnl -----  aix       /dev/ptc        - (loads ldterm by default)
dnl -----  hpux      /dev/ptmx       ldterm ptem
dnl -----  solaris   /dev/ptmx       ldterm ptem ttcompat

dnl -----  aix loads module ldterm by default and wants no ptem
dnl -----  ptmx takes precedence
AC_MSG_CHECKING([for master pty])
if test -r /dev/ptc ; then
  if test -r /dev/ptmx ; then
    AC_DEFINE_UNQUOTED(MASTERPTYDEV, "/dev/ptmx", [hp and sun style pty master])
    AC_MSG_RESULT(ptmx)
  else
    AC_DEFINE_UNQUOTED(MASTERPTYDEV, "/dev/ptc", [aix style pty master])
    AC_MSG_RESULT(ptc)
  fi
elif test -r /dev/ptmx ; then
  AC_DEFINE_UNQUOTED(MASTERPTYDEV, "/dev/ptmx", [hp and sun style pty master])
  AC_MSG_RESULT(ptmx)
else
  AC_DEFINE_UNQUOTED(MASTERPTYDEV, "/dev/null", [lets see what happens])
fi

dnl -----  this will succeed on solaris and fail on hpux
AC_MSG_CHECKING(if your system supports the ttcompat streams module)
AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <stdio.h>
#include <fcntl.h>
#include <stropts.h>
main()
{ int line;

  if ( (line = open("/dev/ptmx", O_RDWR)) >= 0 &&
       ioctl(line, I_PUSH, "ttcompat") == 0 )
    exit(0);
  exit(1);
}
]])],[AC_DEFINE(HAVE_TTCOMPAT, 1,
             "Define if your system supports the ttcompat streams module")
   AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)],[AC_MSG_RESULT(assuming no)])

AC_MSG_CHECKING([whether to enable About Me])
AC_ARG_ENABLE([aboutme],
   AC_HELP_STRING([--enable-aboutme],
                  [Enable about-me capplet]),,
   [enable_aboutme=no])
AC_MSG_RESULT([$enable_aboutme])

if test "x$enable_aboutme" = "xyes"; then
  LIBEBOOK_REQUIREMENT="libebook-1.2 >= 1.7.90"

  AC_MSG_CHECKING(for evolution-data-server)
  if $PKG_CONFIG --exists libebook-1.2; then
     LIBEBOOK_REQUIREMENT="libebook-1.2 >= 1.7.90"
     AC_DEFINE(BUILD_ABOUTME, 1, Build the about-me capplet)
       
     PKG_CHECK_MODULES(LIBEBOOK, libebook-1.2)
  fi
fi

if test -n "$LIBEBOOK_REQUIREMENT"; then
  AC_DEFINE([HAVE_LIBEBOOK], 1,
            [Defined when evolution-data-server libebook-1.2 is detected])
fi

AM_CONDITIONAL(BUILD_ABOUTME, test -n "$LIBEBOOK_REQUIREMENT")
AM_CONDITIONAL(HAVE_LIBEBOOK, test -n "$LIBEBOOK_REQUIREMENT")

dnl ==============================================
dnl HAL stuff
dnl ==============================================
AC_ARG_ENABLE(hal, AC_HELP_STRING([--disable-hal],[build without hal support]))
if test "x$enable_hal" != "xno"; then
	PKG_CHECK_MODULES(HAL, [hal >= 0.5.6, dbus-1 >= 0.32, dbus-glib-1 >= 0.32],
		[ AC_DEFINE(USE_HAL, 1, [defined if using libhal]) ],)
	AC_SUBST(HAL_CFLAGS)
	AC_SUBST(HAL_LIBS)
fi

dnl ==============================================
dnl End: Check that we meet the  dependencies
dnl ==============================================

dnl ==============================================
dnl IDL settings
dnl ==============================================

# orbit-idl
ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

# idl directories
LIBBONOBO_IDL_DIR="`$PKG_CONFIG --variable=idldir libbonobo-2.0`"
AC_SUBST(LIBBONOBO_IDL_DIR)
BONOBO_ACTIVATION_IDL_DIR="`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
AC_SUBST(BONOBO_ACTIVATION_IDL_DIR)

# dbus directory
DBUS_SERVICES_DIR='$(datadir)'"/dbus-1/services"
AC_SUBST(DBUS_SERVICES_DIR)
AC_DEFINE_UNQUOTED(DBUS_SERVICES_DIR, "$DBUS_SERVICES_DIR", [Where services dir for DBUS is])

AC_PATH_PROG(GDK_PIXBUF_CSOURCE, gdk-pixbuf-csource, no)

if test x"$GDK_PIXBUF_CSOURCE" = xno; then
  AC_PATH_PROG(GDK_PIXBUF_CSOURCE_32, gdk-pixbuf-csource-32, no)
  if test x"$GDK_PIXBUF_CSOURCE_32" = xno; then
    AC_MSG_ERROR([gdk-pixbuf-csource executable not found in your path - should be installed with GTK])
  else
    GDK_PIXBUF_CSOURCE=$GDK_PIXBUF_CSOURCE_32
  fi
fi 
  
AC_SUBST(GDK_PIXBUF_CSOURCE)

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal, no)

if test x"$GLIB_GENMARSHAL" = xno; then
  AC_MSG_ERROR([glib-genmarshal executable not found in your path - should be installed with glib])
fi

AC_SUBST(GLIB_GENMARSHAL)

dnl ==============================================
dnl Special GConf section 
dnl ==============================================

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

dnl ==============================================
dnl OSS section
dnl ==============================================
have_oss=no
AC_TRY_COMPILE([
	#ifdef __NetBSD__
	#include <sys/param.h>
	#include <sys/sysctl.h>
	#include <soundcard.h>
	#else
	#include <sys/soundcard.h>
	#endif
	],[
	int arg = SNDCTL_DSP_SETFRAGMENT;
	],[
	have_oss=yes
])
AC_MSG_CHECKING(for OSS audio support)
AC_MSG_RESULT($have_oss)
AM_CONDITIONAL(HAVE_OSS, test x"$have_oss" = "xyes")

dnl ==============================================
dnl ALSA section
dnl ==============================================
have_alsa=no
AC_ARG_ENABLE(alsa,
  AC_HELP_STRING([--disable-alsa],
                 [Turn off support for ALSA version 0.9 or higher]),
       [case "${enableval}" in
               yes) WANT_ALSA=yes ;;
               no)  WANT_ALSA=no ;;
               *) AC_MSG_ERROR(bad value ${enableval} for --disable-alsa) ;;
       esac],
       [WANT_ALSA=yes]) dnl Default value

if test x$WANT_ALSA = xyes ; then
       PKG_CHECK_MODULES(ALSA, alsa >= 0.9.0,
               have_alsa=yes,
               AC_MSG_RESULT(*** All of ALSA dependent parts will be disabled ***))
else
       have_alsa=no
fi

AM_CONDITIONAL(HAVE_ALSA, test x"$have_alsa" = "xyes")
AC_SUBST(ALSA_LIBS)
AC_SUBST(ALSA_CFLAGS)

dnl ==============================================
dnl Esd section
dnl ==============================================
have_esd=no
AC_ARG_ENABLE(esd,
  AC_HELP_STRING([--disable-esd],
                 [Turn off support for ESD]),
       [case "${enableval}" in
               yes) WANT_ESD=yes ;;
               no)  WANT_ESD=no ;;
               *) AC_MSG_ERROR(bad value ${enableval} for --disable-esd) ;;
       esac],
       [WANT_ESD=yes]) dnl Default value

if test x$WANT_ESD = xyes ; then
       PKG_CHECK_MODULES(ESD, esound >= 0.2.28,
               have_esd=yes
	       AC_DEFINE(HAVE_ESD, 1, Have ESD Sound Server),
               AC_MSG_RESULT(*** All of ESD dependent parts will be disabled ***))
else
       have_esd=no
fi

AM_CONDITIONAL(HAVE_ESD, test x"$have_esd" = "xyes")
AC_SUBST(ESD_CFLAGS)
AC_SUBST(ESD_LIBS)

dnl ==============================================
dnl GStreamer section
dnl ==============================================
GST_MAJORMINOR=auto

AC_ARG_ENABLE(gstreamer,
AC_HELP_STRING([--enable-gstreamer],[use gstreamer if available (and optionally specify a version)]),
[case "${enableval}" in
 yes) ENABLE_GSTREAMER=yes ;;
 0.10) ENABLE_GSTREAMER=yes && GST_MAJORMINOR=0.10 ;;
 no)  ENABLE_GSTREAMER=no ;;
 *) AC_MSG_ERROR([
                  *** Bad value ${enableval} for --enable-gstreamer
                  *** Please use one of the following:
                  ***    --enable-gstreamer=0.10
               ]) ;;
esac],
[ENABLE_GSTREAMER=yes]) dnl Default value

if test "x$ENABLE_GSTREAMER" = "xyes"; then
   have_gstreamer=no
   GST_REQS=0.10.1.2
   PKGS="gstreamer-0.10 >= $GST_REQS gstreamer-plugins-base-0.10 >= $GST_REQS"

   PKG_CHECK_MODULES(GST, $PKGS, have_gstreamer=yes,
                     AC_MSG_RESULT([*** All GStreamer-dependent parts will be disabled ***]))

   GST_LIBS="$GST_LIBS -lgstinterfaces-0.10 -lgstaudio-0.10"
else
   have_gstreamer=disabled
   AC_MSG_RESULT(*** GStreamer has been explicitly disabled ***)
fi
AM_CONDITIONAL(HAVE_GSTREAMER, test x"$have_gstreamer" = "xyes")
AC_SUBST(GST_LIBS)
AC_SUBST(GST_CFLAGS)

dnl ==============================================
dnl Define the main variables
dnl ==============================================
COMMON_CFLAGS="-I\$(top_srcdir)/capplets/common"
COMMON_LIBS="\$(top_builddir)/capplets/common/libcommon.la"

EXTRA_CFLAGS="-I\$(top_srcdir)/ -DG_LOG_DOMAIN=\"\\\"\$(cappletname)-properties\\\"\""

GNOMECC_CAPPLETS_CFLAGS="${COMMON_CFLAGS} ${CAPPLET_CFLAGS} ${EXTRA_CFLAGS} ${DBUS_CFLAGS}"
GNOMECC_CAPPLETS_LIBS="${COMMON_LIBS} ${CAPPLET_LIBS} ${DBUS_LIBS}"

GNOMECC_CAPPLETS_CLEANFILES="\$(desktop) \$(desktop).in"
GNOMECC_CAPPLETS_EXTRA_DIST="ChangeLog \$(desktop).in.in \$(cappletname)-capplet.png \$(cappletname)-properties.glade \$(pixmaps_DATA)"

AC_SUBST(GNOMECC_CAPPLETS_EXTRA_DIST)
AC_SUBST(GNOMECC_CAPPLETS_CLEANFILES)
AC_SUBST(GNOMECC_CAPPLETS_CFLAGS)
AC_SUBST(GNOMECC_CAPPLETS_LIBS)

dnl ==============================================
dnl End: Define the main variables
dnl ==============================================

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

LIBBONOBO_IDL_DIR="`$PKG_CONFIG --variable=idldir libbonobo-2.0`"
AC_SUBST(LIBBONOBO_IDL_DIR)

BONOBO_ACTIVATION_IDL_DIR="`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
AC_SUBST(BONOBO_ACTIVATION_IDL_DIR)


dnl ==============================================
dnl Define the directories 
dnl ==============================================
if test "x${prefix}" = "xNONE"; then
  real_prefix=${ac_default_prefix}
else
  real_prefix=${prefix}
fi

AC_DEFINE_UNQUOTED(GNOMECC_DATA_DIR, "${real_prefix}/share/${GETTEXT_PACKAGE}",[Path to gnomecc data files])
AC_DEFINE_UNQUOTED(PREFIX, "$prefix", [install prefix])
GNOMECC_ICONS_DIR='$(datadir)/'${GETTEXT_PACKAGE}'/icons'
AC_SUBST(GNOMECC_ICONS_DIR)
GNOMECC_GLADE_DIR='$(datadir)/'${GETTEXT_PACKAGE}'/interfaces'
AC_SUBST(GNOMECC_GLADE_DIR)
GNOMECC_PIXMAPS_DIR='$(datadir)/'${GETTEXT_PACKAGE}'/pixmaps'
AC_SUBST(GNOMECC_PIXMAPS_DIR)
dnl ==============================================
dnl End: Define the directories 
dnl ==============================================

dnl =======================================
dnl Variables for config_archiverConf.sh.in
dnl =======================================
CONFIG_ARCHIVER_LIBDIR='-L${libdir}'
CONFIG_ARCHIVER_LIBS="$CONFIG_ARCHIVER_LIBS -lconfig_archiver"
CONFIG_ARCHIVER_INCLUDEDIR="$CONFIG_ARCHIVER_CFLAGS -I${includedir}"

AC_SUBST(CONFIG_ARCHIVER_LIBDIR)
AC_SUBST(CONFIG_ARCHIVER_LIBS)
AC_SUBST(CONFIG_ARCHIVER_INCLUDEDIR)
dnl =======================================
dnl End: Variables for config_archiverConf.sh.in
dnl =======================================

dnl =======================================
dnl Update Mime Database
dnl =======================================

AC_PATH_PROG(UPDATE_MIME_DATABASE, update-mime-database, no)

AC_ARG_ENABLE(update-mimedb,
   AC_HELP_STRING([--disable-update-mimedb],
                   [disable the update-mime-database after install [default=no]]),,
    enable_update_mimedb=yes)
AM_CONDITIONAL(ENABLE_UPDATE_MIMEDB, test x$enable_update_mimedb = xyes)


AC_CONFIG_FILES([
Makefile
po/Makefile.in
idl/Makefile
libslab/Makefile
libslab/libslab.pc
gnome-settings-daemon/Makefile
gnome-settings-daemon/xrdb/Makefile
gnome-settings-daemon/actions/Makefile
gnome-settings-daemon/gnome-settings-daemon.pc
shell/Makefile
shell/gnomecc.desktop.in
libbackground/Makefile
libwindow-settings/Makefile
libwindow-settings/gnome-window-settings-2.0.pc
capplets/Makefile
capplets/common/Makefile
capplets/default-applications/Makefile
capplets/background/Makefile
capplets/display/Makefile
capplets/font/Makefile
capplets/keybindings/Makefile
capplets/keyboard/Makefile
capplets/mouse/Makefile
capplets/sound/Makefile
capplets/theme-switcher/Makefile
capplets/ui-properties/Makefile
capplets/accessibility/Makefile
capplets/accessibility/keyboard/Makefile
capplets/accessibility/at-properties/Makefile
capplets/network/Makefile
capplets/windows/Makefile
capplets/about-me/Makefile
help/Makefile
typing-break/Makefile
schemas/Makefile
libsounds/Makefile
vfs-methods/Makefile
vfs-methods/themus/Makefile
vfs-methods/fontilus/Makefile
control-center.spec
vfs-methods/fontilus/gnome-font-viewer.desktop.in
vfs-methods/themus/themus-theme-applier.desktop.in
capplets/font/font-properties.desktop.in
capplets/keybindings/keybinding.desktop.in
capplets/display/display-properties.desktop.in
capplets/mouse/gnome-settings-mouse.desktop.in
capplets/sound/gnome-settings-sound.desktop.in
capplets/theme-switcher/gtk-theme-selector.desktop.in
capplets/theme-switcher/gnome-theme-installer.desktop.in
capplets/default-applications/default-applications.desktop.in
capplets/accessibility/at-properties/at-properties.desktop.in
capplets/accessibility/keyboard/accessibility-keyboard.desktop.in
capplets/background/background.desktop.in
capplets/ui-properties/gnome-ui-properties.desktop.in
capplets/network/gnome-network-preferences.desktop.in
capplets/windows/window-properties.desktop.in
capplets/keyboard/keyboard.desktop.in
capplets/about-me/gnome-about-me.desktop.in
])

dnl *** the following desktop files don't seem to be included in "make dist"
dnl capplets/url-properties/url-properties.desktop.in
dnl capplets/file-types/file-types-capplet.desktop.in
dnl capplets/file-types/file-types.desktop.in
dnl capplets/localization/localization.desktop.in

dnl due to a bug in intltool we need to expand something from the root last control-center.spec
AC_OUTPUT
