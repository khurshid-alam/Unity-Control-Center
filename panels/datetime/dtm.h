/*
 * Generated by gdbus-codegen 2.29.5. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DTM_H__
#define __DTM_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SettingsDaemon.DateTimeMechanism */

#define TYPE_DATE_TIME_MECHANISM (date_time_mechanism_get_type ())
#define DATE_TIME_MECHANISM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DATE_TIME_MECHANISM, DateTimeMechanism))
#define IS_DATE_TIME_MECHANISM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DATE_TIME_MECHANISM))
#define DATE_TIME_MECHANISM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DATE_TIME_MECHANISM, DateTimeMechanism))

struct _DateTimeMechanism;
typedef struct _DateTimeMechanism DateTimeMechanism;
typedef struct _DateTimeMechanismIface DateTimeMechanismIface;

struct _DateTimeMechanismIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_adjust_time) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gint64 seconds_to_add);

  gboolean (*handle_can_set_time) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_set_timezone) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_set_using_ntp) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_hardware_clock_using_utc) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_timezone) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_using_ntp) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_date) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    guint day,
    guint month,
    guint year);

  gboolean (*handle_set_hardware_clock_using_utc) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gboolean is_using_utc);

  gboolean (*handle_set_time) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gint64 seconds_since_epoch);

  gboolean (*handle_set_timezone) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    const gchar *tz);

  gboolean (*handle_set_using_ntp) (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gboolean is_using_ntp);

};

GType date_time_mechanism_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *date_time_mechanism_interface_info (void);


/* D-Bus method call completion functions: */
void date_time_mechanism_complete_set_timezone (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

void date_time_mechanism_complete_get_timezone (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    const gchar *timezone);

void date_time_mechanism_complete_can_set_timezone (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gint value);

void date_time_mechanism_complete_set_date (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

void date_time_mechanism_complete_set_time (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

void date_time_mechanism_complete_can_set_time (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gint value);

void date_time_mechanism_complete_adjust_time (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

void date_time_mechanism_complete_get_hardware_clock_using_utc (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gboolean is_using_utc);

void date_time_mechanism_complete_set_hardware_clock_using_utc (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

void date_time_mechanism_complete_get_using_ntp (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gboolean can_use_ntp,
    gboolean is_using_ntp);

void date_time_mechanism_complete_set_using_ntp (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation);

void date_time_mechanism_complete_can_set_using_ntp (
    DateTimeMechanism *object,
    GDBusMethodInvocation *invocation,
    gint value);



/* D-Bus method calls: */
void date_time_mechanism_call_set_timezone (
    DateTimeMechanism *proxy,
    const gchar *tz,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_set_timezone_finish (
    DateTimeMechanism *proxy,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_set_timezone_sync (
    DateTimeMechanism *proxy,
    const gchar *tz,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_get_timezone (
    DateTimeMechanism *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_get_timezone_finish (
    DateTimeMechanism *proxy,
    gchar **out_timezone,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_get_timezone_sync (
    DateTimeMechanism *proxy,
    gchar **out_timezone,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_can_set_timezone (
    DateTimeMechanism *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_can_set_timezone_finish (
    DateTimeMechanism *proxy,
    gint *out_value,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_can_set_timezone_sync (
    DateTimeMechanism *proxy,
    gint *out_value,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_set_date (
    DateTimeMechanism *proxy,
    guint day,
    guint month,
    guint year,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_set_date_finish (
    DateTimeMechanism *proxy,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_set_date_sync (
    DateTimeMechanism *proxy,
    guint day,
    guint month,
    guint year,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_set_time (
    DateTimeMechanism *proxy,
    gint64 seconds_since_epoch,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_set_time_finish (
    DateTimeMechanism *proxy,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_set_time_sync (
    DateTimeMechanism *proxy,
    gint64 seconds_since_epoch,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_can_set_time (
    DateTimeMechanism *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_can_set_time_finish (
    DateTimeMechanism *proxy,
    gint *out_value,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_can_set_time_sync (
    DateTimeMechanism *proxy,
    gint *out_value,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_adjust_time (
    DateTimeMechanism *proxy,
    gint64 seconds_to_add,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_adjust_time_finish (
    DateTimeMechanism *proxy,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_adjust_time_sync (
    DateTimeMechanism *proxy,
    gint64 seconds_to_add,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_get_hardware_clock_using_utc (
    DateTimeMechanism *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_get_hardware_clock_using_utc_finish (
    DateTimeMechanism *proxy,
    gboolean *out_is_using_utc,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_get_hardware_clock_using_utc_sync (
    DateTimeMechanism *proxy,
    gboolean *out_is_using_utc,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_set_hardware_clock_using_utc (
    DateTimeMechanism *proxy,
    gboolean is_using_utc,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_set_hardware_clock_using_utc_finish (
    DateTimeMechanism *proxy,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_set_hardware_clock_using_utc_sync (
    DateTimeMechanism *proxy,
    gboolean is_using_utc,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_get_using_ntp (
    DateTimeMechanism *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_get_using_ntp_finish (
    DateTimeMechanism *proxy,
    gboolean *out_can_use_ntp,
    gboolean *out_is_using_ntp,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_get_using_ntp_sync (
    DateTimeMechanism *proxy,
    gboolean *out_can_use_ntp,
    gboolean *out_is_using_ntp,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_set_using_ntp (
    DateTimeMechanism *proxy,
    gboolean is_using_ntp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_set_using_ntp_finish (
    DateTimeMechanism *proxy,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_set_using_ntp_sync (
    DateTimeMechanism *proxy,
    gboolean is_using_ntp,
    GCancellable *cancellable,
    GError **error);

void date_time_mechanism_call_can_set_using_ntp (
    DateTimeMechanism *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean date_time_mechanism_call_can_set_using_ntp_finish (
    DateTimeMechanism *proxy,
    gint *out_value,
    GAsyncResult *res,
    GError **error);

gboolean date_time_mechanism_call_can_set_using_ntp_sync (
    DateTimeMechanism *proxy,
    gint *out_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_DATE_TIME_MECHANISM_PROXY (date_time_mechanism_proxy_get_type ())
#define DATE_TIME_MECHANISM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DATE_TIME_MECHANISM_PROXY, DateTimeMechanismProxy))
#define DATE_TIME_MECHANISM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DATE_TIME_MECHANISM_PROXY, DateTimeMechanismProxyClass))
#define DATE_TIME_MECHANISM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DATE_TIME_MECHANISM_PROXY, DateTimeMechanismProxyClass))
#define IS_DATE_TIME_MECHANISM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DATE_TIME_MECHANISM_PROXY))
#define IS_DATE_TIME_MECHANISM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DATE_TIME_MECHANISM_PROXY))

typedef struct _DateTimeMechanismProxy DateTimeMechanismProxy;
typedef struct _DateTimeMechanismProxyClass DateTimeMechanismProxyClass;
typedef struct _DateTimeMechanismProxyPrivate DateTimeMechanismProxyPrivate;

struct _DateTimeMechanismProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DateTimeMechanismProxyPrivate *priv;
};

struct _DateTimeMechanismProxyClass
{
  GDBusProxyClass parent_class;
};

GType date_time_mechanism_proxy_get_type (void) G_GNUC_CONST;

void date_time_mechanism_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DateTimeMechanism *date_time_mechanism_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DateTimeMechanism *date_time_mechanism_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void date_time_mechanism_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DateTimeMechanism *date_time_mechanism_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DateTimeMechanism *date_time_mechanism_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DATE_TIME_MECHANISM_SKELETON (date_time_mechanism_skeleton_get_type ())
#define DATE_TIME_MECHANISM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DATE_TIME_MECHANISM_SKELETON, DateTimeMechanismSkeleton))
#define DATE_TIME_MECHANISM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DATE_TIME_MECHANISM_SKELETON, DateTimeMechanismSkeletonClass))
#define DATE_TIME_MECHANISM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DATE_TIME_MECHANISM_SKELETON, DateTimeMechanismSkeletonClass))
#define IS_DATE_TIME_MECHANISM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DATE_TIME_MECHANISM_SKELETON))
#define IS_DATE_TIME_MECHANISM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DATE_TIME_MECHANISM_SKELETON))

typedef struct _DateTimeMechanismSkeleton DateTimeMechanismSkeleton;
typedef struct _DateTimeMechanismSkeletonClass DateTimeMechanismSkeletonClass;
typedef struct _DateTimeMechanismSkeletonPrivate DateTimeMechanismSkeletonPrivate;

struct _DateTimeMechanismSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DateTimeMechanismSkeletonPrivate *priv;
};

struct _DateTimeMechanismSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType date_time_mechanism_skeleton_get_type (void) G_GNUC_CONST;

DateTimeMechanism *date_time_mechanism_skeleton_new (void);


G_END_DECLS

#endif /* __DTM_H__ */
